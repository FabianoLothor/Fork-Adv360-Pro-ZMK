#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        BHT_KP_R: BHT_KP_R {
            compatible = "zmk,behavior-hold-tap";
            label = "BHT_KP_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <400>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67>;
            hold-trigger-on-release;
        };

        BHT_KP_L: BHT_KP_L {
            compatible = "zmk,behavior-hold-tap";
            label = "BHT_KP_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <400>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 37 38 39 40 41 42 43 44 45 53 54 55 56 57 58 59 68 69 70 71 72 73 74 75>;
        };

        BHT_MO_R: BHT_MO_R {
            compatible = "zmk,behavior-hold-tap";
            label = "BHT_MO_R";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <400>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67>;
            hold-trigger-on-release;
            bindings = <&mo>, <&kp>;
        };

        BHT_MO_L: BHT_MO_L {
            compatible = "zmk,behavior-hold-tap";
            label = "BHT_MO_L";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <400>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 37 38 39 40 41 42 43 44 45 53 54 55 56 57 58 59 68 69 70 71 72 73 74 75>;
            hold-trigger-on-release;
            bindings = <&mo>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        C_L00_TO_L05 {
            bindings = <&to 5>;
            key-positions = <68 67>;
            layers = <0>;
        };

        C_L00_TO_L01 {
            bindings = <&to 1>;
            key-positions = <52 53>;
            layers = <0>;
        };

        C_L01_TO_L00 {
            bindings = <&to 0>;
            key-positions = <67 68>;
            layers = <1>;
        };

        C_L01_TO_L02 {
            bindings = <&to 2>;
            key-positions = <52 53>;
            layers = <1>;
        };

        C_L02_TO_L01 {
            bindings = <&to 1>;
            key-positions = <67 68>;
            layers = <2>;
        };

        C_L02_TO_L03 {
            bindings = <&to 3>;
            key-positions = <53 52>;
            layers = <2>;
        };

        C_L03_TO_L02 {
            bindings = <&to 2>;
            key-positions = <67 68>;
            layers = <3>;
        };

        C_L03_TO_L04 {
            bindings = <&to 4>;
            key-positions = <52 53>;
            layers = <3>;
        };

        C_L04_TO_L03 {
            bindings = <&to 3>;
            key-positions = <67 68>;
            layers = <4>;
        };

        C_L04_TO_L05 {
            bindings = <&to 5>;
            key-positions = <53 52>;
            layers = <4>;
        };

        C_L05_TO_L00 {
            bindings = <&to 0>;
            key-positions = <52 53>;
            layers = <5>;
        };

        C_L05_TO_L04 {
            bindings = <&to 4>;
            key-positions = <68 67>;
            layers = <5>;
        };

        C_BT_NEXT {
            bindings = <&bt BT_NXT>;
            key-positions = <35 38>;
        };

        C_BT_PREV {
            bindings = <&bt BT_PRV>;
            key-positions = <36 37>;
        };

        C_BT_CLEAR {
            bindings = <&bt BT_CLR>;
            key-positions = <35 36 37 38>;
            layers = <0>;
        };

        C_TOGGLE_LEDS {
            bindings = <&bl BL_TOG>;
            key-positions = <65 66 70 69>;
        };

        C_DQ {
            bindings = <&BM_DQ>;
            key-positions = <32 41 40 33>;
            layers = <1 2 3 4 5>;
        };

        C_SQ {
            bindings = <&BM_SQ>;
            key-positions = <33 40>;
            layers = <1 2 3 4 5>;
        };

        C_RB {
            bindings = <&BM_RB>;
            key-positions = <32 41>;
            layers = <1 2 3 4 5>;
        };

        C_SB {
            bindings = <&BM_SB>;
            key-positions = <31 42>;
            layers = <1 2 3 4 5>;
        };

        C_CB {
            bindings = <&BM_CB>;
            key-positions = <30 43>;
            layers = <1 2 3 4 5>;
        };

        C_AB {
            bindings = <&BM_AB>;
            key-positions = <29 44>;
            layers = <1 2 3 4 5>;
        };
    };

    macros {
        #include "version.dtsi"
        #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };

        #endif

        BM_SQ: BM_SQ {
            compatible = "zmk,behavior-macro";
            label = "BM_SQ";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp SQT &kp LEFT>;
        };

        BM_DQ: BM_DQ {
            compatible = "zmk,behavior-macro";
            label = "BM_DQ";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp DQT &kp LEFT>;
        };

        BM_AB: BM_AB {
            compatible = "zmk,behavior-macro";
            label = "BM_AB";
            #binding-cells = <0>;
            bindings = <&kp LT &kp GT &kp LEFT>;
        };

        BM_CB: BM_CB {
            compatible = "zmk,behavior-macro";
            label = "BM_CB";
            #binding-cells = <0>;
            bindings = <&kp LBRC &kp RBRC &kp LEFT>;
        };

        BM_RB: BM_RB {
            compatible = "zmk,behavior-macro";
            label = "BM_RB";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
        };

        BM_SB: BM_SB {
            compatible = "zmk,behavior-macro";
            label = "BM_SB";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp RBKT &kp LEFT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        L00_ACTIONS {
            bindings = <
&none  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F11                                                 &kp F12                 &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &none
&none  &none   &none   &none   &none   &none   &rgb_ug RGB_MEFS_CMD 5                                  &rgb_ug RGB_MEFS_CMD 5  &none   &none   &none   &none   &none    &none
&none  &none   &none   &none   &none   &none   &bootloader             &none  &none      &none  &none  &bootloader             &none   &none   &none   &none   &none    &none
&none  &none   &none   &none   &none   &none                                  &none      &none                                 &none   &none   &none   &none   &none    &none
&none  &none   &none   &none   &none           &none                   &none  &none      &none  &none  &none                           &none   &none   &none   &none    &none
            >;
        };

        L01_QWERTY {
            bindings = <
&kp ESC    &kp NUMBER_1      &kp NUMBER_2          &kp NUMBER_3        &kp NUMBER_4       &kp NUMBER_5   &kp GRAVE                                                     &kp APOS       &kp N6         &kp N7             &kp N8              &kp N9                &kp N0               &kp ESC
&kp TAB    &kp Q             &kp W                 &kp E               &kp R              &kp T          &kp LC(X)                                                     &kp RC(P)      &kp Y          &kp U              &kp I               &kp O                 &kp P                &kp TAB
&kp CAPS   &BHT_KP_L LWIN A  &BHT_KP_L LALT S  &BHT_KP_L LCTRL D  &BHT_KP_L LSHIFT F  &BHT_MO_L 6 G  &kp LC(C)  &kp LC(Z)  &none         &none          &kp RC(Y)  &kp RC(RS(P))  &BHT_MO_R 6 H  &BHT_KP_R RSHIFT J  &BHT_KP_R RCTRL K  &BHT_KP_R LALT L  &BHT_KP_R RWIN SEMI  &kp CAPS
&kp LSHFT  &kp Z             &kp X                 &kp C               &BHT_KP_R RALT V              &kp B                                &kp HOME      &kp PAGE_UP                              &kp N          &BHT_KP_R RALT M              &kp COMMA           &kp DOT               &kp FSLH             &kp RSHFT
&mo 0      &none             &none                 &none               &none                             &kp BSPC   &kp DEL    &kp END       &kp PAGE_DOWN  &kp ENTER  &kp SPACE                     &none              &none               &none                 &none                &mo 0
            >;
        };

        L02_COLEMAK-DHM {
            bindings = <
&kp ESC    &kp NUMBER_1      &kp NUMBER_2          &kp NUMBER_3        &kp NUMBER_4       &kp NUMBER_5   &kp GRAVE                                                     &kp APOS          &kp N6         &kp N7             &kp N8              &kp N9                &kp N0            &kp ESC
&kp TAB    &kp Q             &kp W                 &kp F               &kp P              &kp B          &kp LC(X)                                                     &kp RC(P)      &kp J          &kp L              &kp U               &kp Y                 &kp SEMI          &kp TAB
&kp CAPS   &BHT_KP_L LWIN A  &BHT_KP_L LALT R  &BHT_KP_L LCTRL S  &BHT_KP_L LSHIFT T  &BHT_MO_L 6 G  &kp LC(C)  &kp LC(Z)  &none         &none          &kp RC(Y)  &kp RC(RS(P))  &BHT_MO_R 6 M  &BHT_KP_R RSHIFT N  &BHT_KP_R RCTRL E  &BHT_KP_R LALT I  &BHT_KP_R RWIN O  &kp CAPS
&kp LSHFT  &kp Z             &kp X                 &kp C               &BHT_KP_R RALT D              &kp V                                &kp HOME      &kp PAGE_UP                              &kp K          &BHT_KP_R RALT H              &kp COMMA           &kp DOT               &kp FSLH          &kp RSHFT
&mo 0      &none             &none                 &none               &none                             &kp BSPC   &kp DEL    &kp END       &kp PAGE_DOWN  &kp ENTER  &kp SPACE                     &none              &none               &none                 &none             &mo 0
            >;
        };

        L03_DVORAK {
            bindings = <
&kp ESC    &kp NUMBER_1      &kp NUMBER_2          &kp NUMBER_3        &kp NUMBER_4       &kp NUMBER_5   &kp GRAVE                                                     &kp APOS          &kp N6         &kp N7             &kp N8              &kp N9                &kp N0            &kp ESC
&kp TAB    &kp APOS          &kp COMMA             &kp DOT             &kp P              &kp Y          &kp LC(X)                                                     &kp RC(P)      &kp F          &kp G              &kp C               &kp R                 &kp L             &kp TAB
&kp CAPS   &BHT_KP_L LWIN A  &BHT_KP_L LALT O  &BHT_KP_L LCTRL E  &BHT_KP_L LSHIFT U  &BHT_MO_L 6 I  &kp LC(C)  &kp LC(Z)  &none         &none          &kp RC(Y)  &kp RC(RS(P))  &BHT_MO_R 6 D  &BHT_KP_R RSHIFT H  &BHT_KP_R RCTRL T  &BHT_KP_R LALT N  &BHT_KP_R RWIN S  &kp CAPS
&kp LSHFT  &kp SEMI          &kp Q                 &kp J               &BHT_KP_R RALT K              &kp X                                &kp HOME      &kp PAGE_UP                              &kp B          &BHT_KP_R RALT M              &kp W               &kp V                 &kp Z             &kp RSHFT
&mo 0      &none             &none                 &none               &none                             &kp BSPC   &kp DEL    &kp END       &kp PAGE_DOWN  &kp ENTER  &kp SPACE                     &none              &none               &none                 &none             &mo 0
            >;
        };

        L04 {
            bindings = <
&none  &none  &none  &none  &none  &none  &none                                  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none                                  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none      &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none                &none      &none                &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none         &none  &none  &none      &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };

        L05 {
            bindings = <
&none  &none  &none  &none  &none  &none  &none                                  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none                                  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none      &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none                &none      &none                &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none         &none  &none  &none      &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };

        L06_SYMBOLS {
            bindings = <
&none  &none             &none  &none          &none  &none  &none                                     &none   &kp K_CALCULATOR      &kp BACKSLASH  &kp FSLH  &kp RS(N8)  &kp MINUS             &none
&none  &none             &none  &none          &none  &none  &none                                     &none   &kp RS(NUMBER_4)      &kp N7         &kp N8    &kp N9      &kp RS(EQUAL)         &none
&none  &kp LS(NUMBER_2)  &none  &none          &none  &none  &none   &none   &none      &none  &none   &none   &kp RA(NUMBER_5)      &kp N4         &kp N5    &kp N6      &kp RS(NUMBER_5)      &none
&none  &none             &none  &kp RA(COMMA)  &none  &none                  &none      &none                  &kp RA(RS(NUMBER_4))  &kp N1         &kp N2    &kp N3      &kp RA(RS(NUMBER_6))  &none
&none  &none             &none  &none          &none         &trans  &trans  &none      &none  &trans  &trans                        &kp COMMA      &kp N0    &kp DOT     &kp SEMICOLON         &none
            >;
        };
    };
};
